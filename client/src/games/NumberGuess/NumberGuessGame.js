import React, { useState, useEffect, useCallback } from 'react';
// Not generating NumberGuessGame.css in this batch, so styles will be inline or from global App.css
// For a more polished look, a dedicated CSS file would be better.

// NumberGuessGame component: Implements the core logic and UI for the number guessing game.
const NumberGuessGame = () => {
  // State for the secret number generated by the game
  const [secretNumber, setSecretNumber] = useState(0);
  // State for the user's current guess
  const [guess, setGuess] = useState('');
  // State for feedback messages (e.g., 'Too high!', 'Too low!', 'Correct!')
  const [message, setMessage] = useState('Guess a number between 1 and 100!');
  // State for tracking the number of attempts
  const [attempts, setAttempts] = useState(0);
  // State to indicate if the game is over (player has guessed correctly)
  const [gameOver, setGameOver] = useState(false);
  // State for the maximum number of attempts (optional, can be added later)
  // const [maxAttempts, setMaxAttempts] = useState(10);

  // Function to generate a new secret number and reset the game state
  const startNewGame = useCallback(() => {
    const newSecret = Math.floor(Math.random() * 100) + 1;
    setSecretNumber(newSecret);
    setGuess('');
    setMessage('Guess a number between 1 and 100!');
    setAttempts(0);
    setGameOver(false);
    // console.log(`New secret number (for debugging): ${newSecret}`); // For debugging
  }, []);

  // useEffect to start a new game when the component mounts
  useEffect(() => {
    startNewGame();
  }, [startNewGame]);

  // Function to handle the user's guess submission
  const handleGuess = (e) => {
    e.preventDefault();
    if (gameOver) return; // Don't process guesses if game is over

    const numGuess = parseInt(guess, 10);
    if (isNaN(numGuess) || numGuess < 1 || numGuess > 100) {
      setMessage('Please enter a valid number between 1 and 100.');
      return;
    }

    setAttempts(prevAttempts => prevAttempts + 1);

    if (numGuess === secretNumber) {
      setMessage(`🎉 Correct! You guessed it in ${attempts + 1} attempts! 🎉`);
      setGameOver(true);
    } else if (numGuess < secretNumber) {
      setMessage('Too low! Try a higher number. ⬆️');
    } else {
      setMessage('Too high! Try a lower number. ⬇️');
    }
    setGuess(''); // Clear input after guess
  };

  // Inline styles for the game - ideally these would be in NumberGuessGame.css
  const styles = {
    gameContainer: {
      backgroundColor: 'var(--color-white)',
      padding: '30px',
      borderRadius: '15px',
      boxShadow: '0 10px 20px rgba(0,0,0,0.1)',
      textAlign: 'center',
      maxWidth: '500px',
      margin: '20px auto',
      border: '2px solid var(--color-gold)',
    },
    title: {
      fontFamily: 'var(--font-headings)',
      color: 'var(--color-tomato)',
      fontSize: '2.5em',
      marginBottom: '20px',
    },
    message: {
      fontFamily: 'var(--font-primary)',
      color: 'var(--color-steel-blue)',
      fontSize: '1.2em',
      minHeight: '50px',
      margin: '20px 0',
      fontWeight: '500',
    },
    form: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      gap: '10px',
      marginBottom: '20px',
    },
    input: {
      padding: '12px 15px',
      fontSize: '1em',
      borderRadius: '8px',
      border: '2px solid var(--color-steel-blue)',
      fontFamily: 'var(--font-primary)',
      width: '100px',
      textAlign: 'center',
    },
    button: {
      padding: '12px 25px',
      fontSize: '1em',
      fontFamily: 'var(--font-primary)',
      fontWeight: 'bold',
      backgroundColor: 'var(--color-lime-green)',
      color: 'var(--color-white)',
      border: 'none',
      borderRadius: '8px',
      cursor: 'pointer',
      transition: 'background-color 0.2s ease',
    },
    attempts: {
      fontFamily: 'var(--font-primary)',
      fontSize: '1em',
      color: 'var(--color-black)',
      marginBottom: '20px',
    },
    restartButton: {
        backgroundColor: 'var(--color-tomato)',
        marginTop: '10px'
    }
  };

  return (
    <div style={styles.gameContainer}>
      <h2 style={styles.title}>Number Guessing Fun!</h2>
      <p style={styles.message}>{message}</p>
      
      {!gameOver && (
        <form onSubmit={handleGuess} style={styles.form}>
          <input 
            type="number" 
            value={guess} 
            onChange={(e) => setGuess(e.target.value)} 
            style={styles.input}
            min="1"
            max="100"
            aria-label="Your guess"
            disabled={gameOver}
          />
          <button type="submit" style={styles.button} disabled={gameOver}>Guess!</button>
        </form>
      )}
      
      <p style={styles.attempts}>Attempts: {attempts}</p>
      
      {gameOver && (
        <button onClick={startNewGame} style={{...styles.button, ...styles.restartButton}}>
          Play Again? 🔁
        </button>
      )}
    </div>
  );
};

export default NumberGuessGame;
